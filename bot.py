#8366269150:AAEoaiS6IO5trTKYUPbVH3o29RBcSww73Y
import os
import logging
import re
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ g2p-en –¥–ª—è —Ç–æ—á–Ω–æ—ó —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó
try:
    from g2p_en import G2p
    g2p = G2p()
    G2P_AVAILABLE = True
    logger.info("‚úÖ g2p-en —É—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
except ImportError as e:
    G2P_AVAILABLE = False
    logger.error(f"‚ùå g2p-en –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {e}")

def phonemes_to_cyrillic(phonemes):
    """–ö–æ–Ω–≤–µ—Ä—Ç—É—î —Ñ–æ–Ω–µ–º–∏ –≤ –∫–∏—Ä–∏–ª–∏—á–Ω—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—é"""
    # –°–ª–æ–≤–Ω–∏–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó —Ñ–æ–Ω–µ–º
    phoneme_map = {
        # –ì–æ–ª–æ—Å–Ω—ñ
        '√¶': '–µ',    # cat, bad
        '…ë': '–∞',    # father, car
        '…î': '–æ',    # dog, ball
        '…ô': '–µ',    # about, sofa
        ' å': '–∞',    # but, cup
        '…õ': '–µ',    # bed, red
        '…™': '—ñ',    # sit, big
        'i': '—ñ',    # see, heat
        ' ä': '—É',    # put, book
        'u': '—É',    # too, blue
        '…ù': '–µ—Ä',   # bird, learn
        '…ö': '–µ—Ä',   # better, father
        
        # –î–∏—Ñ—Ç–æ–Ω–≥–∏
        'a…™': '–∞–π',  # my, time
        'a ä': '–∞—É',  # now, out
        'e…™': '–µ–π',  # say, eight
        'o ä': '–æ—É',  # go, home
        '…î…™': '–æ–π',  # boy, coin
        
        # –ü—Ä–∏–≥–æ–ª–æ—Å–Ω—ñ
        'b': '–±', 'd': '–¥', 'f': '—Ñ', 'g': '–≥', 'h': '—Ö',
        'j': '–π', 'k': '–∫', 'l': '–ª', 'm': '–º', 'n': '–Ω',
        '≈ã': '–Ω–≥', 'p': '–ø', 'r': '—Ä', 's': '—Å', ' É': '—à',
        't': '—Ç', 't É': '—á', 'Œ∏': '—Å', '√∞': '–∑', 'v': '–≤',
        'w': '–≤', 'z': '–∑', ' í': '–∂', 'd í': '–¥–∂'
    }
    
    result = []
    i = 0
    phonemes_list = list(phonemes)
    
    while i < len(phonemes_list):
        current = phonemes_list[i]
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–ø–æ–ª—É—á–µ–Ω–Ω—è (2 —Å–∏–º–≤–æ–ª–∏)
        if i + 1 < len(phonemes_list):
            double = current + phonemes_list[i + 1]
            if double in phoneme_map:
                result.append(phoneme_map[double])
                i += 2
                continue
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ –æ–∫—Ä–µ–º—ñ —Å–∏–º–≤–æ–ª–∏
        if current in phoneme_map:
            result.append(phoneme_map[current])
        elif current not in ['Àà', 'Àå', '.', '!', '?']:  # –Ü–≥–Ω–æ—Ä—É—î–º–æ —Å–∏–º–≤–æ–ª–∏ —Å—Ç—Ä–µ—Å—É
            result.append(current)
        i += 1
    
    return ''.join(result)

def improve_pronunciation_rules(text, original_word):
    """–ü–æ–∫—Ä–∞—â—É—î —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—é –∑–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏"""
    # –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –≤–∏–º–æ–≤–∏
    improvements = [
        # –ú'—è–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–¥ –≥–æ–ª–æ—Å–Ω–∏–º–∏
        (r'—Ç—ñ', '—Ç—ñ'), (r'–¥—ñ', '–¥—ñ'), (r'—Å—ñ', '—Å—ñ'), (r'–∑—ñ', '–∑—ñ'),
        (r'–Ω—ñ', '–Ω—ñ'), (r'–ª—ñ', '–ª—ñ'),
        
        # –°–ø—Ä–æ—â–µ–Ω–Ω—è —Å–ø–æ–ª—É—á–µ–Ω—å
        (r'—Ç—Å', '—Ü'), (r'–¥—Å', '–¥–∑'),
        
        # –ê–º–µ—Ä–∏–∫–∞–Ω—Å—å–∫–∞ –≤–∏–º–æ–≤–∞ 'r'
        (r'–µ—Ä', '–µ—Ä'),
        
        # –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –≤–∏–ø–∞–¥–∫–∏
        (r'—å—é', '—é'), (r'—å–µ', '—î'),
    ]
    
    result = text
    
    for pattern, replacement in improvements:
        result = re.sub(pattern, replacement, result)
    
    # –û—Å–æ–±–ª–∏–≤—ñ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –∑–∞–∫—ñ–Ω—á–µ–Ω—å
    if original_word.endswith('y'):
        result = re.sub(r'—ñ$', '—ñ', result)
    if original_word.endswith('ing'):
        result = re.sub(r'—ñ–Ω–≥$', '—ñ–Ω–≥', result)
    if original_word.endswith('tion'):
        result = re.sub(r'—à–µ–Ω$', '—à–µ–Ω', result)
    
    return result

def get_pronunciation(word):
    """–û—Ç—Ä–∏–º—É—î —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—é —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ g2p-en"""
    if not G2P_AVAILABLE:
        return "—Å–∏—Å—Ç–µ–º–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", "", "–ø–æ–º–∏–ª–∫–∞"
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ñ–æ–Ω–µ–º–∏ —á–µ—Ä–µ–∑ g2p-en
        phonemes = g2p(word)
        phonemes_text = ' '.join(phonemes)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ –∫–∏—Ä–∏–ª–∏—Ü—é
        cyrillic = phonemes_to_cyrillic(phonemes)
        
        # –ü–æ–∫—Ä–∞—â—É—î–º–æ –∑–∞ –ø—Ä–∞–≤–∏–ª–∞–º–∏
        improved = improve_pronunciation_rules(cyrillic, word.lower())
        
        return improved, phonemes_text, "—Ñ–æ–Ω–µ—Ç–∏—á–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—è"
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó: {e}")
        return "–ø–æ–º–∏–ª–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó", "", "–ø–æ–º–∏–ª–∫–∞"

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    status = "‚úÖ —É–≤—ñ–º–∫–Ω–µ–Ω–æ" if G2P_AVAILABLE else "‚ùå –≤–∏–º–∫–Ω–µ–Ω–æ"
    
    welcome_text = f"""
üëã –ü—Ä–∏–≤—ñ—Ç, {user.first_name}!

ü§ñ –Ø –±–æ—Ç –¥–ª—è **—Ç–æ—á–Ω–æ—ó —Ñ–æ–Ω–µ—Ç–∏—á–Ω–æ—ó —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó** –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏—Ö —Å–ª—ñ–≤!

üéØ –ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –∞–Ω–≥–ª—ñ–π—Å—å–∫–µ —Å–ª–æ–≤–æ —ñ —è:
‚Ä¢ üîä –ü–æ–∫–∞–∂—É **–≤–∏–º–æ–≤—É** —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏
‚Ä¢ üìù –ü–æ–∫–∞–∂—É **—Ñ–æ–Ω–µ–º–∏** (–º–æ–≤–∞ –∑–≤—É–∫—ñ–≤)
‚Ä¢ üéØ –í–∏–∫–æ—Ä–∏—Å—Ç–∞—é **g2p-en** –¥–ª—è —Ç–æ—á–Ω–æ—ó —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó

üîß **–°—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–∏:**
‚Ä¢ –§–æ–Ω–µ—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑: {status}

üîä **–ü—Ä–∏–∫–ª–∞–¥–∏:**
‚Ä¢ `hello` ‚Üí `—Ö–µ–ª–æ—É` [h …ô l Àào ä]
‚Ä¢ `celebrity` ‚Üí `—Å–µ–ª–µ–±—Ä—ñ—Ç—ñ` [s …ô Ààl …õ b r …™ t i]
‚Ä¢ `beautiful` ‚Üí `–±'—é—Ç—ñ—Ñ—É–ª` [Ààb j u t …™ f  ä l]
‚Ä¢ `question` ‚Üí `–∫–≤–µ—Å—á–µ–Ω` [Ààk w …õ s t É …ôn]

üí° **–°–ø—Ä–æ–±—É–π—Ç–µ —Ü—ñ —Å–ª–æ–≤–∞:**
- celebrity, beautiful, water, computer
- thanks, please, sorry, answer
- people, because, family, friend

–ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ —ñ —Å–ø—Ä–æ–±—É–π! üéØ
    """
    await update.message.reply_text(welcome_text)

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
üìñ **–î–æ–≤—ñ–¥–∫–∞ –ø–æ –±–æ—Ç—É:**

üéØ **–Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î:**
1. –í–∏ –Ω–∞–¥—Å–∏–ª–∞—î—Ç–µ –∞–Ω–≥–ª—ñ–π—Å—å–∫–µ —Å–ª–æ–≤–æ
2. –°–∏—Å—Ç–µ–º–∞ **g2p-en** –∞–Ω–∞–ª—ñ–∑—É—î –∑–≤—É—á–∞–Ω–Ω—è
3. –§–æ–Ω–µ–º–∏ –∫–æ–Ω–≤–µ—Ä—Ç—É—é—Ç—å—Å—è –≤ –∫–∏—Ä–∏–ª–∏—á–Ω—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—é
4. –í–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ —Ç–æ—á–Ω—É –≤–∏–º–æ–≤—É


üìù **–©–æ —Ç–∞–∫–µ —Ñ–æ–Ω–µ–º–∏?**
–¶–µ –º–æ–≤–Ω—ñ –∑–≤—É–∫–∏, —è–∫—ñ —Ç–æ—á–Ω–æ –æ–ø–∏—Å—É—é—Ç—å –≤–∏–º–æ–≤—É:
‚Ä¢ `Œ∏` - –∑–≤—É–∫ "th" —è–∫ –≤ "think"
‚Ä¢ ` É` - –∑–≤—É–∫ "sh" —è–∫ –≤ "ship"  
‚Ä¢ `≈ã` - –∑–≤—É–∫ "ng" —è–∫ –≤ "sing"
‚Ä¢ `t É` - –∑–≤—É–∫ "ch" —è–∫ –≤ "chat"

‚ö†Ô∏è **–û–±–º–µ–∂–µ–Ω–Ω—è:**
‚Ä¢ –ü—Ä–∞—Ü—é—î —Ç—ñ–ª—å–∫–∏ –∑ –æ–∫—Ä–µ–º–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
‚Ä¢ –î–µ—è–∫—ñ —Ä—ñ–¥–∫—ñ—Å–Ω—ñ —Å–ª–æ–≤–∞ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –Ω–µ—Ç–æ—á–Ω–∏–º–∏
‚Ä¢ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—è –æ—Ä—ñ—î–Ω—Ç–æ–≤–∞–Ω–∞ –Ω–∞ –∞–º–µ—Ä–∏–∫–∞–Ω—Å—å–∫—É –≤–∏–º–æ–≤—É

üí° **–ü–æ—Ä–∞–¥–∞:** –î–ª—è —Ç–æ—á–Ω—ñ—à–æ—ó —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ common words
    """
    await update.message.reply_text(help_text)

# –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text.strip()
    
    if user_message.startswith('/'):
        return
    
    if ' ' in user_message:
        await update.message.reply_text("‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ç—ñ–ª—å–∫–∏ **–æ–¥–Ω–µ** —Å–ª–æ–≤–æ")
        return
    
    if not user_message.isalpha():
        await update.message.reply_text("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ç—ñ–ª—å–∫–∏ –ª—ñ—Ç–µ—Ä–∏ (–±–µ–∑ —Ü–∏—Ñ—Ä —á–∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ñ–≤)")
        return
    
    if len(user_message) > 30:
        await update.message.reply_text("‚ö†Ô∏è –°–ª–æ–≤–æ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ. –ú–∞–∫—Å–∏–º—É–º 30 —Å–∏–º–≤–æ–ª—ñ–≤")
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—é
    pronunciation, phonemes, method = get_pronunciation(user_message)
    
    # –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    response = f"""
üî§ **–°–ª–æ–≤–æ:** `{user_message}`
üîä **–í–∏–º–æ–≤–∞:** `{pronunciation}`
"""
    
    if phonemes:
        response += f"üìù **–§–æ–Ω–µ–º–∏:** `[{phonemes}]`\n"
    
    response += f"üéØ **–ú–µ—Ç–æ–¥:** {method}\n"
    response += "üí° *–¢–æ—á–Ω–∞ —Ñ–æ–Ω–µ—Ç–∏—á–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—è —á–µ—Ä–µ–∑ g2p-en*"
    
    await update.message.reply_text(response)

# –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–ü–æ–º–∏–ª–∫–∞: {context.error}")
    await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.")

def main():
    TOKEN = os.environ.get('BOT_TOKEN')
    
    if not TOKEN:
        logger.error("‚ùå BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –î–æ–¥–∞–π—Ç–µ —É –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")
        return
    
    application = Application.builder().token(TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_error_handler(error_handler)
    
    logger.info("üöÄ –ë–æ—Ç –∑ —Ñ–æ–Ω–µ—Ç–∏—á–Ω–æ—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—î—é –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    logger.info(f"üìä G2P –¥–æ—Å—Ç—É–ø–Ω–∏–π: {G2P_AVAILABLE}")
    application.run_polling()

if __name__ == "__main__":
    main()
